"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = __importStar(require("chai"));
var chai_as_promised_1 = __importDefault(require("chai-as-promised"));
var apolloGraphql_1 = require("./apolloGraphql");
chai.use(chai_as_promised_1.default);
var expect = chai.expect;
describe('ApolloGraphQLInteraction', function () {
    var interaction;
    beforeEach(function () {
        interaction = new apolloGraphql_1.ApolloGraphQLInteraction();
    });
    describe('#withVariables', function () {
        describe('when given a set of variables', function () {
            it('adds the variables to the payload', function () {
                interaction.uponReceiving('a request');
                interaction.withRequest({
                    path: '/graphql',
                    method: 'POST',
                });
                interaction.withOperation('query');
                interaction.withQuery('{ hello }');
                interaction.withVariables({
                    foo: 'bar',
                });
                interaction.willRespondWith({
                    status: 200,
                    body: { data: {} },
                });
                var json = interaction.json();
                expect(json.request.body.variables).to.deep.eq({ foo: 'bar' });
            });
        });
        describe('when no variables are presented', function () {
            it('adds an empty variables property to the payload', function () {
                interaction.uponReceiving('a request');
                interaction.withRequest({
                    path: '/graphql',
                    method: 'POST',
                });
                interaction.withOperation('query');
                interaction.withQuery('{ hello }');
                interaction.willRespondWith({
                    status: 200,
                    body: { data: {} },
                });
                var json = interaction.json();
                expect(json.request.body).to.have.property('variables');
            });
        });
    });
    describe('#withOperation', function () {
        describe('when no operationName is presented', function () {
            it('adds a null operationName property to the payload', function () {
                interaction.uponReceiving('a request');
                interaction.withRequest({
                    path: '/graphql',
                    method: 'POST',
                });
                interaction.withQuery('{ hello }');
                interaction.willRespondWith({
                    status: 200,
                    body: { data: {} },
                });
                var json = interaction.json();
                expect(json.request.body).to.have.property('operationName');
            });
        });
    });
});
//# sourceMappingURL=apolloGraphql.spec.js.map