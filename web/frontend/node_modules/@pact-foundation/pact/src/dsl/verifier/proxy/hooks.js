"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerAfterHook = exports.registerBeforeHook = exports.registerHookStateTracking = void 0;
var logger_1 = __importDefault(require("../../../common/logger"));
var registerHookStateTracking = function (hooksState) {
    return function (_a, res_1, next_1) { return __awaiter(void 0, [_a, res_1, next_1], void 0, function (_b, res, next) {
        var body = _b.body;
        return __generator(this, function (_c) {
            if ((body === null || body === void 0 ? void 0 : body.action) === 'setup')
                hooksState.setupCounter += 1;
            if ((body === null || body === void 0 ? void 0 : body.action) === 'teardown')
                hooksState.setupCounter -= 1;
            logger_1.default.debug("hooks state counter is ".concat(hooksState.setupCounter, " after receiving \"").concat(body === null || body === void 0 ? void 0 : body.action, "\" action"));
            next();
            return [2 /*return*/];
        });
    }); };
};
exports.registerHookStateTracking = registerHookStateTracking;
var registerBeforeHook = function (beforeEach, hooksState) {
    return function (_a, res_1, next_1) { return __awaiter(void 0, [_a, res_1, next_1], void 0, function (_b, res, next) {
        var e_1;
        var body = _b.body;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!((body === null || body === void 0 ? void 0 : body.action) === 'setup' && hooksState.setupCounter === 1)) return [3 /*break*/, 5];
                    logger_1.default.debug("executing 'beforeEach' hook");
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, beforeEach()];
                case 2:
                    _c.sent();
                    next();
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _c.sent();
                    logger_1.default.error("error executing 'beforeEach' hook: ".concat(e_1.message));
                    logger_1.default.debug("Stack trace was: ".concat(e_1.stack));
                    next(new Error("error executing 'beforeEach' hook: ".concat(e_1.message)));
                    return [3 /*break*/, 4];
                case 4: return [3 /*break*/, 6];
                case 5:
                    next();
                    _c.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    }); };
};
exports.registerBeforeHook = registerBeforeHook;
var registerAfterHook = function (afterEach, hooksState) {
    return function (_a, res_1, next_1) { return __awaiter(void 0, [_a, res_1, next_1], void 0, function (_b, res, next) {
        var e_2;
        var body = _b.body;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!((body === null || body === void 0 ? void 0 : body.action) === 'teardown' && hooksState.setupCounter === 0)) return [3 /*break*/, 5];
                    logger_1.default.debug("executing 'afterEach' hook");
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, afterEach()];
                case 2:
                    _c.sent();
                    next();
                    return [3 /*break*/, 4];
                case 3:
                    e_2 = _c.sent();
                    logger_1.default.error("error executing 'afterEach' hook: ".concat(e_2.message));
                    logger_1.default.debug("Stack trace was: ".concat(e_2.stack));
                    next(new Error("error executing 'afterEach' hook: ".concat(e_2.message)));
                    return [3 /*break*/, 4];
                case 4: return [3 /*break*/, 6];
                case 5:
                    next();
                    _c.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    }); };
};
exports.registerAfterHook = registerAfterHook;
//# sourceMappingURL=hooks.js.map