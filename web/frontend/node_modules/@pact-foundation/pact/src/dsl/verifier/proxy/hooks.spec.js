"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sinon_1 = require("sinon");
var hooks_1 = require("./hooks");
// This mimics the proxy setup (src/dsl/verifier/proxy/proxy.ts), whereby the
// state handling middleware is run regardless of whether a hook is registered
// or not.
var doRequest = function (action, hooksState, hookHandler) { return __awaiter(void 0, void 0, void 0, function () {
    var hooksStateHandler, hookRequestHandler, request;
    return __generator(this, function (_a) {
        hooksStateHandler = (0, hooks_1.registerHookStateTracking)(hooksState);
        hookRequestHandler = hookHandler || (function (req, res, next) { return next(); });
        request = {
            body: {
                action: action,
            },
        };
        return [2 /*return*/, new Promise(function (resolve) {
                hooksStateHandler(request, null, function () {
                    hookRequestHandler(request, null, resolve);
                });
            })];
    });
}); };
describe('Verifier', function () {
    describe('#registerBeforeHook', function () {
        describe('when the state setup routine is called multiple times before the next teardown', function () {
            it('it executes the beforeEach hook only once', function () { return __awaiter(void 0, void 0, void 0, function () {
                var hooksState, hook, hookHandler;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            hooksState = { setupCounter: 0 };
                            hook = (0, sinon_1.stub)().resolves();
                            hookHandler = (0, hooks_1.registerBeforeHook)(hook, hooksState);
                            return [4 /*yield*/, doRequest('setup', hooksState, hookHandler)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, doRequest('setup', hooksState, hookHandler)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState)];
                        case 4:
                            _a.sent();
                            (0, chai_1.expect)(hook).to.be.calledOnce;
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    describe('#registerAfterHook', function () {
        describe('when the state teardown routine is called multiple times before the next setup', function () {
            it('it executes the afterEach hook only once', function () { return __awaiter(void 0, void 0, void 0, function () {
                var hooksState, hook, hookHandler;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            hooksState = { setupCounter: 0 };
                            hook = (0, sinon_1.stub)().resolves();
                            hookHandler = (0, hooks_1.registerAfterHook)(hook, hooksState);
                            return [4 /*yield*/, doRequest('setup', hooksState)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, doRequest('setup', hooksState)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, hookHandler)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, hookHandler)];
                        case 4:
                            _a.sent();
                            (0, chai_1.expect)(hook).to.be.calledOnce;
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    describe('#registerBeforeHook and #registerAfterHook', function () {
        describe('when the state teardown routine is called multiple times before the next setup', function () {
            it('it executes the beforeEach and afterEach hooks only once', function () { return __awaiter(void 0, void 0, void 0, function () {
                var hooksState, beforeHook, afterHook, beforeHookHandler, afterHookHandler;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            hooksState = { setupCounter: 0 };
                            beforeHook = (0, sinon_1.stub)().resolves();
                            afterHook = (0, sinon_1.stub)().resolves();
                            beforeHookHandler = (0, hooks_1.registerBeforeHook)(beforeHook, hooksState);
                            afterHookHandler = (0, hooks_1.registerAfterHook)(afterHook, hooksState);
                            return [4 /*yield*/, doRequest('setup', hooksState, beforeHookHandler)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, doRequest('setup', hooksState, beforeHookHandler)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, afterHookHandler)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, afterHookHandler)];
                        case 4:
                            _a.sent();
                            (0, chai_1.expect)(beforeHook).to.be.calledOnce;
                            (0, chai_1.expect)(afterHook).to.be.calledOnce;
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe('when multiple interactions are executed', function () {
            it('it executes the beforeEach and afterEach hooks once for each interaction', function () { return __awaiter(void 0, void 0, void 0, function () {
                var hooksState, beforeHook, afterHook, beforeHookHandler, afterHookHandler;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            hooksState = { setupCounter: 0 };
                            beforeHook = (0, sinon_1.stub)().resolves();
                            afterHook = (0, sinon_1.stub)().resolves();
                            beforeHookHandler = (0, hooks_1.registerBeforeHook)(beforeHook, hooksState);
                            afterHookHandler = (0, hooks_1.registerAfterHook)(afterHook, hooksState);
                            // Interaction 1 (two "given" states)
                            return [4 /*yield*/, doRequest('setup', hooksState, beforeHookHandler)];
                        case 1:
                            // Interaction 1 (two "given" states)
                            _a.sent();
                            return [4 /*yield*/, doRequest('setup', hooksState, beforeHookHandler)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, afterHookHandler)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, afterHookHandler)];
                        case 4:
                            _a.sent();
                            // Interaction 2 (one "given" state)
                            return [4 /*yield*/, doRequest('setup', hooksState, beforeHookHandler)];
                        case 5:
                            // Interaction 2 (one "given" state)
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, afterHookHandler)];
                        case 6:
                            _a.sent();
                            // Interaction 3 (three "given" states)
                            return [4 /*yield*/, doRequest('setup', hooksState, beforeHookHandler)];
                        case 7:
                            // Interaction 3 (three "given" states)
                            _a.sent();
                            return [4 /*yield*/, doRequest('setup', hooksState, beforeHookHandler)];
                        case 8:
                            _a.sent();
                            return [4 /*yield*/, doRequest('setup', hooksState, beforeHookHandler)];
                        case 9:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, afterHookHandler)];
                        case 10:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, afterHookHandler)];
                        case 11:
                            _a.sent();
                            return [4 /*yield*/, doRequest('teardown', hooksState, afterHookHandler)];
                        case 12:
                            _a.sent();
                            (0, chai_1.expect)(beforeHook).to.be.calledThrice;
                            (0, chai_1.expect)(afterHook).to.be.calledThrice;
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
});
//# sourceMappingURL=hooks.spec.js.map