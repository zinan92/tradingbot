"""
Strategy Contracts

Pydantic models for strategy-related data transfer objects.
"""
from datetime import datetime
from decimal import Decimal
from enum import Enum
from typing import Dict, Any, List, Optional
from pydantic import BaseModel, Field, ConfigDict


class SignalType(str, Enum):
    """Trading signal type"""
    BUY = "buy"
    SELL = "sell"
    CLOSE = "close"
    CLOSE_LONG = "close_long"
    CLOSE_SHORT = "close_short"
    HOLD = "hold"


class SignalStrength(str, Enum):
    """Signal strength/confidence"""
    WEAK = "weak"
    MODERATE = "moderate"
    STRONG = "strong"
    VERY_STRONG = "very_strong"


class StrategyConfig(BaseModel):
    """Strategy configuration"""
    model_config = ConfigDict(arbitrary_types_allowed=True)
    
    strategy_id: str = Field(..., description="Unique strategy identifier")
    name: str = Field(..., description="Strategy name")
    version: str = Field("1.0.0", description="Strategy version")
    description: Optional[str] = Field(None, description="Strategy description")
    
    # Trading parameters
    symbols: List[str] = Field(..., description="Trading symbols")
    timeframe: str = Field(..., description="Primary timeframe")
    secondary_timeframes: List[str] = Field(default_factory=list, description="Additional timeframes")
    
    # Risk parameters
    max_position_size: Decimal = Field(..., description="Maximum position size")
    stop_loss_pct: Optional[Decimal] = Field(None, description="Default stop loss percentage")
    take_profit_pct: Optional[Decimal] = Field(None, description="Default take profit percentage")
    trailing_stop_pct: Optional[Decimal] = Field(None, description="Trailing stop percentage")
    max_drawdown: Optional[Decimal] = Field(None, description="Maximum allowed drawdown")
    
    # Strategy-specific parameters
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Strategy-specific parameters")
    
    # Execution settings
    enabled: bool = Field(True, description="Strategy enabled flag")
    paper_trading: bool = Field(True, description="Paper trading mode")
    require_confirmation: bool = Field(False, description="Require manual confirmation")
    
    # Metadata
    created_at: datetime = Field(default_factory=datetime.now, description="Creation timestamp")
    updated_at: datetime = Field(default_factory=datetime.now, description="Last update timestamp")


class TradingSignal(BaseModel):
    """Trading signal generated by strategy"""
    model_config = ConfigDict(arbitrary_types_allowed=True)
    
    signal_id: str = Field(..., description="Unique signal identifier")
    strategy_id: str = Field(..., description="Source strategy identifier")
    symbol: str = Field(..., description="Trading symbol")
    signal_type: SignalType = Field(..., description="Signal type")
    strength: SignalStrength = Field(..., description="Signal strength")
    
    # Trade parameters
    suggested_entry: Optional[Decimal] = Field(None, description="Suggested entry price")
    suggested_stop_loss: Optional[Decimal] = Field(None, description="Suggested stop loss")
    suggested_take_profit: Optional[Decimal] = Field(None, description="Suggested take profit")
    suggested_size: Optional[Decimal] = Field(None, description="Suggested position size")
    
    # Signal metadata
    confidence: Decimal = Field(..., ge=0, le=1, description="Signal confidence (0-1)")
    timestamp: datetime = Field(..., description="Signal generation time")
    expires_at: Optional[datetime] = Field(None, description="Signal expiration time")
    
    # Analysis data
    indicators: Dict[str, Any] = Field(default_factory=dict, description="Indicator values")
    reasons: List[str] = Field(default_factory=list, description="Signal reasons")
    warnings: List[str] = Field(default_factory=list, description="Any warnings")


class StrategyPerformance(BaseModel):
    """Strategy performance metrics"""
    model_config = ConfigDict(arbitrary_types_allowed=True)
    
    strategy_id: str = Field(..., description="Strategy identifier")
    period_start: datetime = Field(..., description="Performance period start")
    period_end: datetime = Field(..., description="Performance period end")
    
    # Performance metrics
    total_trades: int = Field(..., description="Total trades executed")
    winning_trades: int = Field(..., description="Winning trades count")
    losing_trades: int = Field(..., description="Losing trades count")
    win_rate: Decimal = Field(..., description="Win rate percentage")
    
    # Returns
    total_pnl: Decimal = Field(..., description="Total profit/loss")
    total_return: Decimal = Field(..., description="Total return percentage")
    sharpe_ratio: Optional[Decimal] = Field(None, description="Sharpe ratio")
    max_drawdown: Decimal = Field(..., description="Maximum drawdown")
    
    # Risk metrics
    avg_risk_reward: Optional[Decimal] = Field(None, description="Average risk/reward ratio")
    profit_factor: Optional[Decimal] = Field(None, description="Profit factor")
    
    # Execution metrics
    avg_trade_duration: Optional[float] = Field(None, description="Average trade duration (hours)")
    total_commission: Decimal = Field(..., description="Total commission paid")
    total_slippage: Decimal = Field(..., description="Total slippage cost")


class StrategyState(BaseModel):
    """Current strategy state"""
    model_config = ConfigDict(arbitrary_types_allowed=True)
    
    strategy_id: str = Field(..., description="Strategy identifier")
    status: str = Field(..., description="Current status (running, paused, stopped)")
    last_signal: Optional[TradingSignal] = Field(None, description="Last generated signal")
    active_positions: int = Field(0, description="Number of active positions")
    pending_orders: int = Field(0, description="Number of pending orders")
    current_drawdown: Decimal = Field(Decimal("0"), description="Current drawdown")
    daily_pnl: Decimal = Field(Decimal("0"), description="Today's PnL")
    last_update: datetime = Field(..., description="Last state update")