"""
Domain events for Strategy bounded context
"""

from dataclasses import dataclass
from datetime import datetime
from decimal import Decimal
from typing import Dict, Any, Optional
from uuid import UUID


@dataclass(frozen=True)
class StrategyEvent:
    """Base class for strategy domain events"""
    strategy_id: UUID
    occurred_at: datetime
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "event_type": self.__class__.__name__,
            "strategy_id": str(self.strategy_id),
            "occurred_at": self.occurred_at.isoformat(),
            **self._get_event_data()
        }
    
    def _get_event_data(self) -> Dict[str, Any]:
        return {}


@dataclass(frozen=True)
class SignalGenerated(StrategyEvent):
    """Signal generated by strategy"""
    symbol: str
    signal_type: str  # BUY, SELL, HOLD
    strength: Decimal  # 0-1 signal strength
    confidence: Decimal  # 0-1 confidence level
    parameters: Dict[str, Any]
    
    def _get_event_data(self) -> Dict[str, Any]:
        return {
            "symbol": self.symbol,
            "signal_type": self.signal_type,
            "strength": str(self.strength),
            "confidence": str(self.confidence),
            "parameters": self.parameters
        }


@dataclass(frozen=True)
class StrategyStarted(StrategyEvent):
    """Strategy has been started"""
    name: str
    initial_capital: Decimal
    parameters: Dict[str, Any]
    
    def _get_event_data(self) -> Dict[str, Any]:
        return {
            "name": self.name,
            "initial_capital": str(self.initial_capital),
            "parameters": self.parameters
        }


@dataclass(frozen=True)
class StrategyStopped(StrategyEvent):
    """Strategy has been stopped"""
    reason: str
    final_pnl: Decimal
    
    def _get_event_data(self) -> Dict[str, Any]:
        return {
            "reason": self.reason,
            "final_pnl": str(self.final_pnl)
        }


@dataclass(frozen=True)
class StrategyPaused(StrategyEvent):
    """Strategy has been paused"""
    reason: str
    
    def _get_event_data(self) -> Dict[str, Any]:
        return {"reason": self.reason}


@dataclass(frozen=True)
class StrategyResumed(StrategyEvent):
    """Strategy has been resumed"""
    reason: str
    
    def _get_event_data(self) -> Dict[str, Any]:
        return {"reason": self.reason}


@dataclass(frozen=True)
class StrategyAdjusted(StrategyEvent):
    """Strategy parameters have been adjusted"""
    adjustment_type: str
    parameters: Dict[str, Any]
    
    def _get_event_data(self) -> Dict[str, Any]:
        return {
            "adjustment_type": self.adjustment_type,
            "parameters": self.parameters
        }


@dataclass(frozen=True)
class RebalanceRequired(StrategyEvent):
    """Portfolio rebalancing is required"""
    reason: str
    target_allocations: Optional[Dict[str, Decimal]] = None
    
    def _get_event_data(self) -> Dict[str, Any]:
        data = {"reason": self.reason}
        if self.target_allocations:
            data["target_allocations"] = {
                k: str(v) for k, v in self.target_allocations.items()
            }
        return data